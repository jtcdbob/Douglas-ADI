
Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cadi_main.c(23,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at cadi_main.c(80,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cadi_main.c(82,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at cadi_main.c(82,9)
      remark #15389: vectorization support: reference f has unaligned access   [ cadi_main.c(84,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 221 
      remark #15477: vector loop cost: 21.250 
      remark #15478: estimated potential speedup: 9.220 
      remark #15479: lightweight vector operations: 14 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at cadi_main.c(82,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at cadi_main.c(89,5)
   remark #15388: vectorization support: reference f has aligned access   [ cadi_main.c(92,9) ]
   remark #15388: vectorization support: reference uk has aligned access   [ cadi_main.c(91,9) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 119 
   remark #15477: vector loop cost: 21.500 
   remark #15478: estimated potential speedup: 5.530 
   remark #15479: lightweight vector operations: 15 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at cadi_main.c(89,5)
<Remainder>
LOOP END

LOOP BEGIN at cadi_main.c(96,5)
<Peeled>
LOOP END

LOOP BEGIN at cadi_main.c(96,5)
   remark #15389: vectorization support: reference f has unaligned access   [ cadi_main.c(99,9) ]
   remark #15389: vectorization support: reference uk has unaligned access   [ cadi_main.c(98,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 232 
   remark #15477: vector loop cost: 22.750 
   remark #15478: estimated potential speedup: 9.060 
   remark #15479: lightweight vector operations: 19 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at cadi_main.c(96,5)
<Remainder>
LOOP END

LOOP BEGIN at cadi_main.c(103,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 124 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 4.760 
   remark #15479: lightweight vector operations: 14 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at cadi_main.c(103,5)
<Remainder>
LOOP END

LOOP BEGIN at cadi_main.c(110,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 232 
   remark #15477: vector loop cost: 27.250 
   remark #15478: estimated potential speedup: 8.500 
   remark #15479: lightweight vector operations: 19 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at cadi_main.c(110,5)
<Remainder>
LOOP END

LOOP BEGIN at cadi_main.c(142,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cadi_main.c(144,9)
      remark #15389: vectorization support: reference fstar has unaligned access   [ cadi_main.c(145,13) ]
      remark #15388: vectorization support: reference f has aligned access   [ cadi_main.c(145,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 4.770 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at cadi_main.c(144,9)
   <Remainder>
      remark #15389: vectorization support: reference fstar has unaligned access   [ cadi_main.c(145,13) ]
      remark #15388: vectorization support: reference f has aligned access   [ cadi_main.c(145,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cadi_main.c(144,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at cadi_main.c(153,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cadi_main.c(155,9)
      remark #15382: vectorization support: call to function relaxOperation(double *__restrict__, const double *__restrict__, double *, double, double, int) cannot be vectorized   [ cadi_main.c(156,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at my_functions.h(229,5) inlined into cadi_main.c(160,18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(230,9) inlined into cadi_main.c(160,18)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at my_functions.h(231,13) inlined into cadi_main.c(160,18)
            remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(232,30) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15399: vectorization support: unroll factor set to 8
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 15 
            remark #15477: vector loop cost: 1.750 
            remark #15478: estimated potential speedup: 7.160 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at my_functions.h(236,5) inlined into cadi_main.c(160,18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(160,18)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(160,18)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 15 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.020 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(160,18)
      <Remainder>
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(160,18)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at cadi_main.c(161,9)
   <Multiversioned v1>
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(162,13) ]
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(162,13) ]
      remark #15388: vectorization support: reference uk has aligned access   [ cadi_main.c(162,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 6.700 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at cadi_main.c(161,9)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(162,13) ]
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(162,13) ]
      remark #15388: vectorization support: reference uk has aligned access   [ cadi_main.c(162,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cadi_main.c(161,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cadi_main.c(161,9)
   <Multiversioned v2>
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(162,13) ]
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(162,13) ]
      remark #15388: vectorization support: reference uk has aligned access   [ cadi_main.c(162,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 6.700 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at cadi_main.c(161,9)
   <Remainder, Multiversioned v2>
   LOOP END

   LOOP BEGIN at my_functions.h(229,5) inlined into cadi_main.c(164,20)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(230,9) inlined into cadi_main.c(164,20)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at my_functions.h(231,13) inlined into cadi_main.c(164,20)
            remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(232,30) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15399: vectorization support: unroll factor set to 8
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 15 
            remark #15477: vector loop cost: 1.750 
            remark #15478: estimated potential speedup: 7.160 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at my_functions.h(236,5) inlined into cadi_main.c(164,20)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(164,20)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(164,20)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 15 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.020 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(164,20)
      <Remainder>
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(164,20)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at cadi_main.c(167,9)
      remark #15382: vectorization support: call to function relaxOperation(double *__restrict__, const double *__restrict__, double *, double, double, int) cannot be vectorized   [ cadi_main.c(170,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at my_functions.h(229,5) inlined into cadi_main.c(172,18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(230,9) inlined into cadi_main.c(172,18)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at my_functions.h(231,13) inlined into cadi_main.c(172,18)
            remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(232,30) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15399: vectorization support: unroll factor set to 8
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 15 
            remark #15477: vector loop cost: 1.750 
            remark #15478: estimated potential speedup: 7.160 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at my_functions.h(236,5) inlined into cadi_main.c(172,18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(172,18)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(172,18)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 15 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.020 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(172,18)
      <Remainder>
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(172,18)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at cadi_main.c(173,9)
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(174,13) ]
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(174,13) ]
      remark #15388: vectorization support: reference uk has aligned access   [ cadi_main.c(174,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 6.700 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at cadi_main.c(173,9)
   <Remainder>
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(174,13) ]
      remark #15388: vectorization support: reference uLast has aligned access   [ cadi_main.c(174,13) ]
      remark #15388: vectorization support: reference uk has aligned access   [ cadi_main.c(174,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cadi_main.c(173,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at my_functions.h(229,5) inlined into cadi_main.c(176,20)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(230,9) inlined into cadi_main.c(176,20)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at my_functions.h(231,13) inlined into cadi_main.c(176,20)
            remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(232,30) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15399: vectorization support: unroll factor set to 8
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 15 
            remark #15477: vector loop cost: 1.750 
            remark #15478: estimated potential speedup: 7.160 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at my_functions.h(236,5) inlined into cadi_main.c(176,20)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(176,20)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(176,20)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 15 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.020 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(176,20)
      <Remainder>
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at my_functions.h(237,9) inlined into cadi_main.c(176,20)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: relaxOperation(double *__restrict__, const double *__restrict__, double *, double, double, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at my_functions.h(16,5) inlined into my_functions.h(175,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(17,9) inlined into my_functions.h(175,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(175,5)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(175,5)
         remark #15388: vectorization support: reference u_t has aligned access   [ my_functions.h(19,17) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 2.070 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(175,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(23,5) inlined into my_functions.h(175,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(175,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(175,5)
      remark #15389: vectorization support: reference u_t has unaligned access   [ my_functions.h(25,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15479: lightweight vector operations: 1 
      remark #15481: heavy-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(175,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(176,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(126,5) inlined into my_functions.h(178,9)
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(127,9) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(127,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(127,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(127,9) ]
      remark #15388: vectorization support: reference scratch has aligned access   [ my_functions.h(127,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 25 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 4.690 
      remark #15479: lightweight vector operations: 13 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(126,5) inlined into my_functions.h(178,9)
   <Remainder>
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(127,9) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(127,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(127,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(127,9) ]
      remark #15388: vectorization support: reference scratch has aligned access   [ my_functions.h(127,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(126,5) inlined into my_functions.h(178,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at my_functions.h(126,5) inlined into my_functions.h(178,9)
   <Peeled>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(179,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(100,5) inlined into my_functions.h(181,9)
      remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(101,9) ]
      remark #15388: vectorization support: reference scratch has aligned access   [ my_functions.h(101,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(101,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(101,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 21 
      remark #15477: vector loop cost: 3.750 
      remark #15478: estimated potential speedup: 4.720 
      remark #15479: lightweight vector operations: 10 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(100,5) inlined into my_functions.h(181,9)
   <Remainder>
      remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(101,9) ]
      remark #15388: vectorization support: reference scratch has aligned access   [ my_functions.h(101,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(101,9) ]
      remark #15389: vectorization support: reference scratch has unaligned access   [ my_functions.h(101,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(100,5) inlined into my_functions.h(181,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(33,5) inlined into my_functions.h(185,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(34,9) inlined into my_functions.h(185,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(35,13) inlined into my_functions.h(185,5)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(36,17) ]
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(36,17) ]
         remark #15389: vectorization support: reference fstar has unaligned access   [ my_functions.h(36,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 8
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 6.690 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(40,5) inlined into my_functions.h(185,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(41,9) inlined into my_functions.h(185,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(41,9) inlined into my_functions.h(185,5)
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference fstar has aligned access   [ my_functions.h(42,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 16 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 8.540 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(41,9) inlined into my_functions.h(185,5)
   <Remainder>
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference fstar has aligned access   [ my_functions.h(42,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(41,9) inlined into my_functions.h(185,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(50,5) inlined into my_functions.h(186,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(52,13) inlined into my_functions.h(186,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(51,9) inlined into my_functions.h(186,5)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(51,9) inlined into my_functions.h(186,5)
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 5.000 
         remark #15478: estimated potential speedup: 2.920 
         remark #15479: lightweight vector operations: 4 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(51,9) inlined into my_functions.h(186,5)
      <Remainder>
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at my_functions.h(51,9) inlined into my_functions.h(186,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(58,9) inlined into my_functions.h(186,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(57,5) inlined into my_functions.h(186,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(57,5) inlined into my_functions.h(186,5)
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 16 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 2.920 
      remark #15479: lightweight vector operations: 4 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(57,5) inlined into my_functions.h(186,5)
   <Remainder>
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(57,5) inlined into my_functions.h(186,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(16,5) inlined into my_functions.h(222,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(17,9) inlined into my_functions.h(222,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(222,5)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(222,5)
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(19,17) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 2.070 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(222,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(23,5) inlined into my_functions.h(222,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(222,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(222,5)
      remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(25,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15479: lightweight vector operations: 1 
      remark #15481: heavy-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(222,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(205,1)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form

   LOOP BEGIN at my_functions.h(207,5)
      remark #15382: vectorization support: call to function _mm_malloc(unsigned long, unsigned long) cannot be vectorized   [ my_functions.h(148,32) ]
      remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ my_functions.h(165,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between cprime line 149 and cprime line 163
      remark #15346: vector dependence: assumed ANTI dependence between cprime line 163 and cprime line 149

      LOOP BEGIN at my_functions.h(155,5) inlined into my_functions.h(209,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between cprime line 157 and cprime line 156
         remark #15346: vector dependence: assumed ANTI dependence between cprime line 156 and cprime line 157
      LOOP END

      LOOP BEGIN at my_functions.h(162,27) inlined into my_functions.h(209,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between x line 163 and x line 163
         remark #15346: vector dependence: assumed ANTI dependence between x line 163 and x line 163
      LOOP END

      LOOP BEGIN at my_functions.h(162,27) inlined into my_functions.h(209,9)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(16,5) inlined into my_functions.h(213,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(17,9) inlined into my_functions.h(213,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(213,5)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(213,5)
         remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(19,17) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 2.070 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(18,13) inlined into my_functions.h(213,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(23,5) inlined into my_functions.h(213,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(213,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(213,5)
      remark #15389: vectorization support: reference dst has unaligned access   [ my_functions.h(25,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15479: lightweight vector operations: 1 
      remark #15481: heavy-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(24,9) inlined into my_functions.h(213,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(67,5) inlined into my_functions.h(214,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(68,9) inlined into my_functions.h(214,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(69,13) inlined into my_functions.h(214,5)
         remark #15389: vectorization support: reference dst has unaligned access   [ my_functions.h(70,17) ]
         remark #15389: vectorization support: reference dst has unaligned access   [ my_functions.h(70,17) ]
         remark #15389: vectorization support: reference v has unaligned access   [ my_functions.h(70,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 8
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 18 
         remark #15477: vector loop cost: 2.750 
         remark #15478: estimated potential speedup: 6.220 
         remark #15479: lightweight vector operations: 6 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(74,5) inlined into my_functions.h(214,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(75,9) inlined into my_functions.h(214,5)
   <Peeled, Multiversioned v1>
   LOOP END

   LOOP BEGIN at my_functions.h(75,9) inlined into my_functions.h(214,5)
   <Multiversioned v1>
      remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference v has aligned access   [ my_functions.h(76,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 18 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 7.390 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(75,9) inlined into my_functions.h(214,5)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference v has aligned access   [ my_functions.h(76,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(75,9) inlined into my_functions.h(214,5)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at my_functions.h(75,9) inlined into my_functions.h(214,5)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at my_functions.h(75,9) inlined into my_functions.h(214,5)
   <Multiversioned v2>
      remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference v has aligned access   [ my_functions.h(76,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 18 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 7.390 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(75,9) inlined into my_functions.h(214,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(215,1)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form

   LOOP BEGIN at my_functions.h(217,5)
      remark #15382: vectorization support: call to function _mm_malloc(unsigned long, unsigned long) cannot be vectorized   [ my_functions.h(148,32) ]
      remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ my_functions.h(165,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between cprime line 149 and cprime line 163
      remark #15346: vector dependence: assumed ANTI dependence between cprime line 163 and cprime line 149

      LOOP BEGIN at my_functions.h(155,5) inlined into my_functions.h(219,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between cprime line 157 and cprime line 156
         remark #15346: vector dependence: assumed ANTI dependence between cprime line 156 and cprime line 157
      LOOP END

      LOOP BEGIN at my_functions.h(162,27) inlined into my_functions.h(219,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between x line 163 and x line 163
         remark #15346: vector dependence: assumed ANTI dependence between x line 163 and x line 163
      LOOP END

      LOOP BEGIN at my_functions.h(162,27) inlined into my_functions.h(219,9)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: transpose_cache(double *__restrict__, const double *__restrict__, size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at my_functions.h(16,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(17,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(18,13)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(18,13)
         remark #15388: vectorization support: reference dst has aligned access   [ my_functions.h(19,17) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 2.070 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(18,13)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(23,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(24,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(24,9)
      remark #15389: vectorization support: reference dst has unaligned access   [ my_functions.h(25,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15479: lightweight vector operations: 1 
      remark #15481: heavy-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(24,9)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: vec_subtract(double *__restrict__, const double *__restrict__, size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at my_functions.h(33,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(34,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(35,13)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(36,17) ]
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(36,17) ]
         remark #15389: vectorization support: reference v has unaligned access   [ my_functions.h(36,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 8
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 6.690 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(40,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(41,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(41,9)
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference v has aligned access   [ my_functions.h(42,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 16 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 8.540 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(41,9)
   <Remainder>
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(42,13) ]
      remark #15388: vectorization support: reference v has aligned access   [ my_functions.h(42,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(41,9)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: vec_transpose_add(double *__restrict__, const double *__restrict__, size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at my_functions.h(50,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(52,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(51,9)
      <Peeled>
      LOOP END

      LOOP BEGIN at my_functions.h(51,9)
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 5.000 
         remark #15478: estimated potential speedup: 2.920 
         remark #15479: lightweight vector operations: 4 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at my_functions.h(51,9)
      <Remainder>
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(53,17) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at my_functions.h(51,9)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(58,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(57,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(57,5)
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 16 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 2.920 
      remark #15479: lightweight vector operations: 4 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(57,5)
   <Remainder>
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(59,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(57,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: vec_subtract_half(double *__restrict__, const double *__restrict__, size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at my_functions.h(67,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(68,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(69,13)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(70,17) ]
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(70,17) ]
         remark #15389: vectorization support: reference v has unaligned access   [ my_functions.h(70,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 8
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 18 
         remark #15477: vector loop cost: 2.750 
         remark #15478: estimated potential speedup: 6.220 
         remark #15479: lightweight vector operations: 6 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(74,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(75,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(75,9)
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference v has aligned access   [ my_functions.h(76,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 18 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 7.390 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(75,9)
   <Remainder>
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ my_functions.h(76,13) ]
      remark #15388: vectorization support: reference v has aligned access   [ my_functions.h(76,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(75,9)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: solve_tri_special(double *__restrict__, const double, const double, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at my_functions.h(155,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cprime line 157 and cprime line 156
LOOP END

LOOP BEGIN at my_functions.h(162,27)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between x line 163 and x line 163
LOOP END

LOOP BEGIN at my_functions.h(162,27)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: normInf_cache(const double *__restrict__, const size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at my_functions.h(229,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(230,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at my_functions.h(231,13)
         remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(232,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 8
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 15 
         remark #15477: vector loop cost: 1.750 
         remark #15478: estimated potential speedup: 7.160 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at my_functions.h(236,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at my_functions.h(237,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at my_functions.h(237,9)
      remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 15 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 7.020 
      remark #15479: lightweight vector operations: 6 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at my_functions.h(237,9)
   <Remainder>
      remark #15389: vectorization support: reference u has unaligned access   [ my_functions.h(238,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at my_functions.h(237,9)
   <Remainder>
   LOOP END
LOOP END
===========================================================================
