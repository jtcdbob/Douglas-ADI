Source Line  Source                                                                                                                  CPU Time  Spin Time  Overhead Time
-----------  ----------------------------------------------------------------------------------------------------------------------  --------  ---------  -------------
20           [Unknown]                                                                                                                 2.297s         0s             0s
22           [Unknown]                                                                                                                 0.209s         0s             0s
73           [Unknown]                                                                                                                 0.006s         0s             0s
74           [Unknown]                                                                                                                 0.096s         0s             0s
96           [Unknown]                                                                                                                 0.002s         0s             0s
97                   u[i] += a*(u_temp[i-1]+u_temp[i+1]) + b * u_temp[i];                                                              0.102s         0s             0s
98               }                                                                                                                                                     
99           //    free(scratch);                                                                                                                                      
100          }                                                                                                                                                         
101                                                                                                                                                                    
102          void solve_tri_special(double* restrict x, double* restrict cprime, const double a, const double b, const int n){                                         
103               /*                                                                                                                                                   
104               This solve is designed to solve a tridiagonal linear system using thomas' algorithm with the following structure:                                    
105                                                                                                                                                                    
106               1  0   0   0   0   0                                                                                                                                 
107               -a 1-b -a  0   0   0                                                                                                                                 
108               0  -a  1-b -a  0   0                                                                                                                                 
109               ......                                                                                                                                               
110               0  0   0   -a  1-b -a                                                                                                                                
111               0  0   0   0   0   1                                                                                                                                 
112                                                                                                                                                                    
113               There is little room for generalizing its application but it should yield great performance boost                                                    
114               */                                                                                                                                                   
115                                                                                                                                                                    
116              // Allocate scratch space.                                                                                                                            
117          //    double* cprime = (double*) malloc(sizeof(double) * n);                                                                                              
118              cprime[0] = 0;                                                                                                                                        
119              double astar = -a;                                                                                                                                    
120              double bstar = 1-b;                                                                                                                                   
121              double m;                                                                                                                                             
122              // loop from 1 to N - 2 inclusive                                                                                                                     
123              for (int i = 1; i < n-1; i++) {                                                                                       0.130s         0s             0s
124                  m = 1.0 / (bstar - astar * cprime[i - 1]);                                                                        0.129s         0s             0s
125                  cprime[i] = astar * m;                                                                                            4.367s         0s             0s
126                  x[i] = (x[i] - astar * x[i - 1]) * m; // I'm not sure about this step, might step into the last one               2.086s         0s             0s
127              }                                                                                                                                                     
128              cprime[n-1] = 0;                                                                                                                                      
129              // loop from N - 2 to 0 inclusive, safely testing loop end condition                                                                                  
130              for (int i = n - 1; i-- > 0; )                                                                                        0.113s         0s             0s
131                  x[i] = x[i] - cprime[i] * x[i + 1];                                                                               1.655s         0s             0s
132                                                                                                                                                                    
133          //    free(cprime);                                                                                                                                       
134          }                                                                                                                                                         
135                                                                                                                                                                    
136          void relaxOperation(double * restrict u, const double * restrict fstar, double* scratch, double a, double b, int n){                                      
151          [Unknown]                                                                                                                 0.007s         0s             0s
152          [Unknown]                                                                                                                 0.564s         0s             0s
155          [Unknown]                                                                                                                 0.007s         0s             0s
156          [Unknown]                                                                                                                 0.791s         0s             0s
163          [Unknown]                                                                                                                 0.002s         0s             0s
164          [Unknown]                                                                                                                 0.525s         0s             0s
176          [Unknown]                                                                                                                 0.009s         0s             0s
177          [Unknown]                                                                                                                 0.010s         0s             0s
251          [Unknown]                                                                                                                 0.001s         0s             0s
316          [Unknown]                                                                                                                 0.001s         0s             0s
317          [Unknown]                                                                                                                 0.054s         0s             0s
359          [Unknown]                                                                                                                 0.020s         0s             0s
